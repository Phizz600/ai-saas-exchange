
import { ProductWithSeller } from "@/types/marketplace";

export const convertToProductWithSeller = (products: any[]): ProductWithSeller[] => {
  return products.map(product => ({
    ...product,
    image_url: product.image_url || product.image || "/placeholder.svg",
    seller: product.seller || {
      id: product.seller_id || "",
      full_name: "Anonymous",
      avatar_url: "/placeholder.svg"
    },
    seller_id: product.seller_id || product.seller?.id || "",
    active_users: product.active_users || "",
    admin_feedback: product.admin_feedback || "",
    auction_end_time: product.auction_end_time || "", 
    auction_status: product.auction_status || "",
    business_location: product.business_location || "",
    business_model: product.business_model || "",
    business_type: product.business_type || "",
    category: product.category || "",
    category_other: product.category_other || "",
    competitors: product.competitors || "",
    customer_acquisition_cost: product.customer_acquisition_cost || 0,
    current_price: product.current_price || product.price || 0,
    demo_url: product.demo_url || "",
    deliverables: product.deliverables || [],
    description: product.description || "",
    gross_profit_margin: product.gross_profit_margin || 0,
    has_patents: product.has_patents || false,
    industry: product.industry || "",
    industry_other: product.industry_other || "",
    integrations: product.integrations || [],
    integrations_other: product.integrations_other || "",
    investment_timeline: product.investment_timeline || "",
    is_verified: product.is_verified || false,
    llm_type: product.llm_type || "",
    llm_type_other: product.llm_type_other || "",
    monetization: product.monetization || "",
    monetization_other: product.monetization_other || "",
    monthly_expenses: product.monthly_expenses || {},
    monthly_profit: product.monthly_profit || 0,
    number_of_employees: product.number_of_employees || "",
    payment_status: product.payment_status || "",
    product_age: product.product_age || "",
    product_link: product.product_link || "",
    reviewed_at: product.reviewed_at || "",
    reviewed_by: product.reviewed_by || "",
    special_notes: product.special_notes || "",
    team_size: product.team_size || "",
    tech_stack: product.tech_stack || [],
    tech_stack_other: product.tech_stack_other || "",
    created_at: product.created_at || new Date().toISOString(),
    status: product.status || "active",
    updated_at: product.updated_at || new Date().toISOString(),
    highest_bid: product.highest_bid || 0,
    highest_bidder_id: product.highest_bidder_id || "",
    is_code_audited: product.is_code_audited || false,
    is_revenue_verified: product.is_revenue_verified || false,
    is_traffic_verified: product.is_traffic_verified || false,
    listing_type: product.listing_type || "fixed_price",
    min_price: product.min_price || 0, // Add default value for min_price
  })) as ProductWithSeller[];
};
